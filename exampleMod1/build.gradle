buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = 'spongepowered-repo'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.0"
group = "com.example.examplemod1" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "examplemod1"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.4.2749"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180814"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    compile ('org.spongepowered:mixin:0.8.2') {
        exclude module: 'guava'
        exclude module: 'commons-io'
        exclude module: 'gson'
    }
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'com.example.examplemod1.mixin.MixinCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes "ForceLoadAsMod": "true"
        // attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        // attributes "TweakOrder": 0 loading to a dev env
        attributes "MixinConfigs": "mixins.example1.json"
    }
}

mixin {
    add sourceSets.main, "mixins.example1.refmap.json"
}

task clearClasses {
    project.delete(files("build/classes/java/main"))
}

task devMCJar(dependsOn: build, type: Jar) { //hack to get resources in dev environment
    manifest {
        attributes 'FMLCorePlugin': 'com.example.examplemod1.mixin.MixinCore'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
        attributes "ForceLoadAsMod": "true"
    }
//    from zipTree("build/libs/examplemod2-" + project.version + ".jar") //normal ugly hack
    from zipTree("build/libs/examplemod1-" + project.version + ".jar").matching { //enhanced ugly hack
        include 'META-INF/**'
        include 'mixins**'
    }
    destinationDir = file("build/tmp/devMCJar")
    classifier("dev")
}

task debugMC(dependsOn: devMCJar) << {
    copy {
        from(zipTree("build/tmp/devMCJar/examplemod1-" + project.version + "-dev.jar"))
        into("build/classes/java/main")
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobf.jar.mappingType = 'SEARGE'
